# -*- python -*-
import os
import yaml
import lsst.sconsUtils as utils
from lsst.sconsUtils.utils import libraryLoaderEnvironment

from SCons.Script import SConscript, GetOption


env = utils.env.Clone(ENV=os.environ)

PKG_ROOT = env.ProductDir("ci_cpp_gen3")
REPO_ROOT = os.path.join(PKG_ROOT, "DATA")
TESTDATA_ROOT = env.ProductDir("testdata_latiss_cpp")
CAMERA = "lsst.obs.lsst.Latiss"

num_process = GetOption('num_jobs')

# Load the exposure dictionary.
with open(os.path.join(TESTDATA_ROOT, "raw", "manifest.yaml")) as f:
    exposureDict = yaml.safe_load(f)

# These three functions construct commands to be used below.
def getExecutableCmd(package, script, *args):
    """Function to construct a command from the specified package.

    Parameters
    ----------
    package : `str`
        Package to get the command from.
    script : `str`
        Command to find in that package.
    args : `list` [`str`]
        Arguments to concatenate to the command.

    Returns
    -------
    cmd : `str`
        The constructed command.
    """
    cmds = ["{} python {}".format(libraryLoaderEnvironment(),
                                  os.path.join(env.ProductDir(package), "bin", script))]
    cmds.extend(args)
    return " ".join(cmds)

def getPipeTaskCmd(stage, expList, pipelineFile):
    """Construct a pipetask command in a uniform way.

    Parameters
    ---------
    stage : `str`
        Name of the calibration stage to construct.
    expList : `list` [`int`]
        List of exposure ids to use in generating the calibration.
    pipelineFile : `str`
        Name of pipeline yaml to use.

    Returns
    -------
    cmd : `str`
        The constructed command.
    """
    if stage == 'bias':
        inputCollections = 'LATISS/raw/all,LATISS/calib'
    else:
        inputCollections = 'LATISS/raw/all,LATISS/calib,calib/v00'

    pipelineYaml = os.path.join(PKG_ROOT, "pipelines", pipelineFile)
    if not os.path.exists(pipelineYaml):
        pipelineYaml = os.path.join(env.ProductDir('obs_lsst'), 'pipelines', 'latiss', pipelineFile)
    if not os.path.exists(pipelineYaml):
        pipelineYaml = os.path.join(env.ProductDir('cp_pipe'), 'pipelines', pipelineFile)

    args = ['run '
            '-j', str(num_process),
            '-d "instrument=\'LATISS\' AND detector=0 AND exposure IN (',
            ','.join(str(exp) for exp in expList), ')"',
            f"-b {REPO_ROOT}/butler.yaml",
            f"-i {inputCollections}",
            f"-o ci_cpp_{stage}",
            f"-p {pipelineYaml}",
            '--register-dataset-types']
    return getExecutableCmd('ctrl_mpexec', 'pipetask', *args)

def getCertifyCmd(stage):
    """
    Construct a certify command in a uniform way.

    Parameters
    ----------
    stage : `str`
        Name of the calibration stage to ingest.

    Returns
    -------
    cmd : `str`
        The constructed command.
    """
    return getExecutableCmd('daf_butler', 'butler', 'certify-calibrations',
                            f"{REPO_ROOT}", f"ci_cpp_{stage}", 'calib/v00',
                            '--begin-date 1980-01-01', '--end-date 2050-01-01', stage)


# Begin ci_cpp build commands.
# Create the butler, register the instrument, and add calibs.
butler = env.Command([os.path.join(REPO_ROOT, "gen3.sqlite3"),
                      os.path.join(REPO_ROOT, "butler.yaml"),
                      os.path.join(REPO_ROOT, "LATISS", "calib")], None,
                     [getExecutableCmd("daf_butler", "butler",
                                       "create", REPO_ROOT),
                      getExecutableCmd("daf_butler", "butler",
                                       "register-instrument", REPO_ROOT, CAMERA),
                      getExecutableCmd("daf_butler", "butler",
                                       "write-curated-calibrations", REPO_ROOT,
                                       CAMERA)
                  ])
env.Alias("butler", butler)

# Ingest the raw data.
RAW_ROOT = os.path.join(TESTDATA_ROOT, "raw", "2020-01-28")
ingest = env.Command(os.path.join(REPO_ROOT, "LATISS", "raw"), butler,
                     [getExecutableCmd("daf_butler", "butler",
                                       "ingest-raws", REPO_ROOT,
                                       RAW_ROOT)])
env.Alias("ingest", ingest)

# Create BIAS
bias = env.Command([os.path.join(REPO_ROOT, 'ci_cpp_bias'),
                    os.path.join(REPO_ROOT, 'calib', 'v00', 'bias')], ingest,
                   [getPipeTaskCmd('bias', exposureDict['biasExposures'], 'cpBias.yaml'),
                    getCertifyCmd('bias')])
env.Alias('bias', bias)

# Create DARK
dark = env.Command([os.path.join(REPO_ROOT, 'ci_cpp_dark'),
                    os.path.join(REPO_ROOT, 'calib', 'v00', 'dark')], bias,
                   [getPipeTaskCmd('dark', exposureDict['darkExposures'], 'cpDark.yaml'),
                    getCertifyCmd('dark')])
env.Alias('dark', dark)

# Create FLAT
flat = env.Command([os.path.join(REPO_ROOT, 'ci_cpp_flat'),
                    os.path.join(REPO_ROOT, 'calib', 'v00', 'flat')], dark,
                   [getPipeTaskCmd('flat', exposureDict['flatExposures'], 'cpFlat.yaml'),
                    getCertifyCmd('flat')])
env.Alias('flat', flat)

# Create CROSSTALK
crosstalk = env.Command([os.path.join(REPO_ROOT, 'ci_cpp_crosstalk'),
                         os.path.join(REPO_ROOT, "calib", 'v00', "crosstalk")], flat,
                        [getPipeTaskCmd('crosstalk', exposureDict['scienceExposures'],
                                        'measureCrosstalk.yaml'),
                         getCertifyCmd('crosstalk')])
env.Alias('crosstalk', crosstalk)

#PTC
ptc = env.Command([os.path.join(REPO_ROOT, 'ci_cpp_ptc'),
                   os.path.join(REPO_ROOT, "calib", 'v00', "ptc")], crosstalk,
                  [getPipeTaskCmd('ptc', exposureDict['ptcExposurePairs'],
                                  'measurePhotonTransferCurve.yaml'),
                   getCertifyCmd('ptc')])
env.Alias('ptc', ptc)

# Brighter-fatter Kernel
bfk = env.Command([os.path.join(REPO_ROOT, 'ci_cpp_bfk'),
                   os.path.join(REPO_ROOT, "calib", 'v00', "bfk")], ptc,
                  [getPipeTaskCmd('bfk', [exposureDict['allFlatExposures'][0]],
                                  'cpBfkSolve.yaml'),
                   getCertifyCmd('bfk')])
env.Alias('bfk', bfk)

# Run a science exposure
science = env.Command(os.path.join(REPO_ROOT, 'ci_cpp_science'), crosstalk,
                      [getPipeTaskCmd('science', exposureDict['scienceExposures'],
                                      'runIsr.yaml')])
env.Alias('science', science)

# Create DEFECTS
defects = env.Command([os.path.join(REPO_ROOT, 'ci_cpp_defects'),
                       os.path.join(REPO_ROOT, "calib", 'v00', "defects")], crosstalk,
                      [getPipeTaskCmd('defects', exposureDict['flatExposures'] +
                                      exposureDict['darkExposures'],
                                      'findDefects.yaml'),
                       getCertifyCmd('defects')])
env.Alias('defects', defects)

# Set up dependencies
env.Depends(utils.targets['tests'], os.path.join(REPO_ROOT, "LATISS", "calib"))
env.Depends(utils.targets['tests'], os.path.join(REPO_ROOT, "LATISS", "raw"))
env.Depends(utils.targets['tests'], os.path.join(REPO_ROOT, 'ci_cpp_bias'))
env.Depends(utils.targets['tests'], os.path.join(REPO_ROOT, 'ci_cpp_dark'))
env.Depends(utils.targets['tests'], os.path.join(REPO_ROOT, 'ci_cpp_flat'))
env.Depends(utils.targets['tests'], os.path.join(REPO_ROOT, 'ci_cpp_crosstalk'))
env.Depends(utils.targets['tests'], os.path.join(REPO_ROOT, 'ci_cpp_ptc'))
env.Depends(utils.targets['tests'], os.path.join(REPO_ROOT, 'ci_cpp_bfk'))
env.Depends(utils.targets['tests'], os.path.join(REPO_ROOT, 'ci_cpp_defects'))
env.Depends(utils.targets['tests'], os.path.join(REPO_ROOT, 'ci_cpp_science'))


# Set up things to clean.
targets = [defects, science, ptc, crosstalk, flat, dark, bias, ingest, butler]
env.Clean(targets, [y for x in targets for y in x] +
          [os.path.join(REPO_ROOT, "calib"), os.path.join(REPO_ROOT, "LATISS")])

env.Alias('install', 'SConscript')
